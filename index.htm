
<!DOCTYPE HTML>
<html>
	<head>
		<title>Petri Calc Sandbox</title>
		<script type="text/javascript" src="petri_calc.js"></script>
		<script type="text/javascript" src="petri_canvas.js"></script>
		<link href="style.css" rel="stylesheet" type="text/css" />
		<script type="text/javascript">
			var net_obj, init_obj, color_obj, crit_obj;
			function load_network_def() {
				try { net_obj = JSON.parse(document.getElementById("network_input").value); }
				catch (e) { alert("failed to parse network defintion."); }
				try { init_obj = JSON.parse(document.getElementById("initial_input").value); }
				catch (e) { alert("failed to parse initial values."); }
				try { color_obj = JSON.parse(document.getElementById("colors_input").value); }
				catch (e) { alert("failed to parse color values."); }
				var table = calcVectTable(init_obj, net_obj,150);
				document.getElementById("output_div").innerHTML = vectTableToHTML(table);
				var cw = new canvasWriter(document.getElementById("chart_canvas"));
				cw.setSizeBasedOnDataSet(table);
				cw.reset();
				cw.drawAxis();
				cw.drawCurves(table, color_obj);
			}

			function start_network_evolve() {
				try { crit_obj = JSON.parse(document.getElementById("crit_input").value); }
				catch (e) { alert("failed to parse criteria values."); }
				var cw_current = new canvasWriter(document.getElementById("current_canvas"));
				var cw_best = new canvasWriter(document.getElementById("best_canvas"));
				load_network_def();
				var table = calcVectTable(init_obj, net_obj,150);
				var ev = new petriEvolve(init_obj, net_obj, crit_obj);
				cw_current.setSizeBasedOnDataSet(table);
				cw_current.reset();
				cw_current.drawAxis();
				cw_current.drawCurves(table, color_obj);
				cw_best.setSizeBasedOnDataSet(table);
				cw_best.reset();
				cw_best.drawAxis();
				cw_best.drawCurves(table, color_obj);
				for (x in crit_obj) {
					cw_current.drawTarget(crit_obj[x].time, crit_obj[x].quant);
					cw_best.drawTarget(crit_obj[x].time, crit_obj[x].quant);
				}
				document.getElementById("output_div").innerHTML = "best: " + ev.evalTable(table);
			}
		</script>
	</head>
	<body>
		<h1>Petri Calc Sandbox</h1>
		<div id="main_content_div">
			<table>
				<tr>
					<td>Enter network definition:</td>
					<td><textarea id="network_input">
			[
				{"name": "h_out", "input": ["heat"], "output": [], "rate": 0.05},
				{"name": "burn", "input": ["wood"], "output": ["heat"], "rate": 0.05},
				{"name": "h_in", "input": [], "output": ["heat"], "rate": 0.5}
			]
				</textarea></td></tr>
				<tr><td>Enter initial settings:</td>
				<td><textarea id="initial_input"> {"heat":50.0, "wood":50} </textarea>
				</td></tr>
				<tr><td>Enter colors:</td>
				<td><textarea id="colors_input"> {"heat": "red", "wood": "brown"} </textarea>
				</td></tr>
	</table>
			<button onclick="load_network_def();">Load</button>

		</div>
		<div id="canvas_div"><canvas id="chart_canvas"></canvas></div>
		<div id="">
			<table>
				<tr>
					<td>Enter optimization criteria:</td>
					<td> <textarea id="crit_input"> [{"time":100, "state": "heat", "quant": 20.0},{"time":20, "state": "heat", "quant": 30.0},{"time":100, "state": "wood", "quant": 0.0}] </textarea> </td>
				</tr>
			</table>
			<button onclick="start_network_evolve();">Start</button>
		</div>
		<div id="evolve_div">
			<canvas width=400 height=300 id="current_canvas"></canvas>
			<canvas width=400 height=300 id="best_canvas"></canvas>
		</div>
		<div id="output_div"></div>
	</body>

</html>
