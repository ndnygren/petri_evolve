
<!DOCTYPE HTML>
<html>
	<head>
		<title>Petri Calc Sandbox</title>
		<script type="text/javascript" src="petri_calc.js"></script>
		<script type="text/javascript" src="petri_canvas.js"></script>
		<link href="style.css" rel="stylesheet" type="text/css" />
		<script type="text/javascript">
			var net_obj, color_obj, crit_obj;
			function load_network_def() {
				try { net_obj = JSON.parse(document.getElementById("network_input").value); }
				catch (e) { alert("failed to parse network defintion."); }
				try { crit_obj = JSON.parse(document.getElementById("initial_input").value); }
				catch (e) { alert("failed to parse initial values."); }
				try { color_obj = JSON.parse(document.getElementById("colors_input").value); }
				catch (e) { alert("failed to parse color values."); }
				var table = calcVectTable(crit_obj[0].initial, net_obj,150);
				document.getElementById("output_div").innerHTML = vectTableToHTML(table);
				var cw = new canvasWriter(document.getElementById("chart_canvas"));
				cw.loadTable(table, color_obj, crit_obj);
			}

			function slowAsyncLoop(cw_c, cw_b, ev, frame, lambda, gens) {
				if (frame % lambda == 0) {
					var table = ev.calcTable(ev.bestInSet(ev.ls));
					ev.makeLambdaSet(lambda);
					cw_b.loadTable(table, color_obj, crit_obj);
				}
				var table_c = ev.calcTable(ev.ls[frame % lambda]);
				cw_c.loadTable(table_c, color_obj, crit_obj);

				document.getElementById("output_div").innerHTML
					= "frame " + frame
					+ ", current: " + ev.evalTable(table_c)
					+ ", orig: " + ev.evalTable(ev.calcTable(ev.best_net));

				if (frame < lambda * gens) {
					setTimeout(function () {
						slowAsyncLoop(cw_c, cw_b, ev, frame+1, lambda, gens);
					}, 1);

				}
			}

			function start_network_evolve() {
				load_network_def();
				var cw_current = new canvasWriter(document.getElementById("current_canvas"));
				var cw_best = new canvasWriter(document.getElementById("best_canvas"));
				var ev = new petriEvolve(crit_obj, net_obj);
				ev.freq = document.getElementById("input_freq").value;
				ev.intensity = document.getElementById("input_inten").value;

				slowAsyncLoop(cw_current, cw_best, ev, 0,
						document.getElementById("input_lambda").value,
						document.getElementById("input_gen").value);
			}
		</script>
	</head>
	<body>
		<h1>Petri Calc Sandbox</h1>
		<h2>Net Definition:</h2>
		<div id="main_content_div">
			<table>
				<tr>
					<td>Enter network definition:</td>
					<td><textarea id="network_input">
			[
				{"name": "h_out", "input": ["heat"], "output": [], "rate": 0.05},
				{"name": "burn", "input": ["wood"], "output": ["heat"], "rate": 0.05},
				{"name": "h_in", "input": [], "output": ["heat"], "rate": 0.5}
			]
				</textarea></td></tr>
				<tr><td>Enter initial settings:</td>
					<td><textarea id="initial_input">
							[
							{"initial":{"heat":50.0, "wood":50}, "criteria": [{"time":100, "state": "heat", "quant": 20.0},{"time":20, "state": "heat", "quant": 30.0},{"time":100, "state": "wood", "quant": 0.0}] },
							{"initial":{"heat":0.0, "wood":50}, "criteria": [{"time":100, "state": "heat", "quant": 20.0},{"time":20, "state": "heat", "quant": 20.0},{"time":100, "state": "wood", "quant": 0.0}] }
							] </textarea>
				</td></tr>
				<tr><td>Enter colors:</td>
				<td><textarea id="colors_input"> {"heat": "red", "wood": "orange"} </textarea>
				</td></tr>
	</table>
			<button onclick="load_network_def();">Load</button>

		</div>
		<h2>Preview:</h2>
		<div id="canvas_div"><canvas id="chart_canvas"></canvas></div>
		<h2>Optimization Options:</h2>
		<div id="">
			<table>
				<tr>
					<th>Generations</th>
					<th>Lambda</th>
					<th>Frequency</th>
					<th>Intensity</th>
				</tr>
				<tr>
					<td><input id="input_gen" value="50" /></td>
					<td><input id="input_lambda" value="10" /></td>
					<td><input id="input_freq" value="0.3" /></td>
					<td><input id="input_inten" value="0.5" /></td>
				</tr>
			</table>
			<button onclick="start_network_evolve();">Start</button>
		</div>
		<h2>Progress:</h2>
		<div id="evolve_div">
			<table>
				<tr><th>current</th><th>best</th></tr>
				<tr>
					<td><canvas width=400 height=300 id="current_canvas"></canvas></td>
					<td><canvas width=400 height=300 id="best_canvas"></canvas></td>
				</tr>
			</table>
		</div>
		<h2>Output:</h2>
		<div id="output_div"></div>
	</body>

</html>
