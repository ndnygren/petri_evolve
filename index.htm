
<!DOCTYPE HTML>
<html>
	<head>
		<title>Petri Calc Sandbox</title>
		<script type="text/javascript" src="petri_calc.js"></script>
		<script type="text/javascript" src="petri_canvas.js"></script>
		<script type="text/javascript" src="examples.js"></script>
		<link href="style.css" rel="stylesheet" type="text/css" />
		<script type="text/javascript">
			var net_obj, color_obj, crit_obj;

			function loadExample(idx) {
				if (!petri_examples[idx]) {
					throw("Bad index ("+idx+") for examples.");
				}
				document.getElementById("network_input").value = JSON.stringify(petri_examples[idx].network, null, "\t");
				document.getElementById("initial_input").value = JSON.stringify(petri_examples[idx].initial, null, "\t");
				document.getElementById("colors_input").value = JSON.stringify(petri_examples[idx].colors, null, "\t");
			}

			function copyResultToInit() {
				document.getElementById("network_input").value = document.getElementById("evo_result_text").value;
				document.getElementById("output_div").innerHTML = "";
			}

			function load_network_def() {
				try { net_obj = JSON.parse(document.getElementById("network_input").value); }
				catch (e) { alert("failed to parse network defintion."); }
				try { crit_obj = JSON.parse(document.getElementById("initial_input").value); }
				catch (e) { alert("failed to parse initial values."); }
				try { color_obj = JSON.parse(document.getElementById("colors_input").value); }
				catch (e) { alert("failed to parse color values."); }
				var table = calcVectTable(
						fillInitVect(net_obj, crit_obj && crit_obj[0] ? crit_obj[0].initial : {}),
						net_obj,150);
				document.getElementById("output_div").innerHTML = vectTableToHTML(table);
				var cw = new canvasWriter(document.getElementById("chart_canvas"));
				cw.loadTable([table], color_obj, [crit_obj[0]]);
			}

			function slowAsyncLoop(cw_c, cw_b, ev, frame, lambda, gens) {
				if (frame % lambda == 0) {
					var table = ev.calcTable(ev.bestInSet(ev.ls));
					ev.makeLambdaSet(lambda);
					cw_b.loadTable(table, color_obj, crit_obj);
				}
				var table_c = ev.calcTable(ev.ls[frame % lambda]);
				cw_c.loadTable(table_c, color_obj, crit_obj);

				document.getElementById("output_div").innerHTML
					= "frame " + frame
					+ ", MSE: " + ev.evalTable(ev.calcTable(ev.best_net));

				if (frame < lambda * gens) {
					setTimeout(function () {
						slowAsyncLoop(cw_c, cw_b, ev, frame+1, lambda, gens);
						}, 1);
				} else {
				document.getElementById("slow_button").disabled=false;
				document.getElementById("fast_button").disabled=false;
					document.getElementById("output_div").innerHTML
						+= "<h3>Proposed Changes</h3>"
						+"<textarea id=\"evo_result_text\" disabled=true>" + JSON.stringify(ev.best_net, null, "\t") + "</textarea>"
						+ "<button onclick='copyResultToInit()'>Accept</button>";
				}
			}

			function fastAsyncLoop(cw_c, cw_b, ev, frame, lambda, gens) {
				ev.makeLambdaSet(lambda);
				var table = ev.calcTable(ev.bestInSet(ev.ls));
				cw_b.loadTable(table, color_obj, crit_obj);

				document.getElementById("output_div").innerHTML
					= "frame " + frame
					+ ", MSE: " + ev.evalTable(table);

				if (frame < gens) {
					setTimeout(function () {
						fastAsyncLoop(cw_c, cw_b, ev, frame+1, lambda, gens);
						}, 1);
				} else {
					document.getElementById("slow_button").disabled=false;
					document.getElementById("fast_button").disabled=false;
					document.getElementById("output_div").innerHTML
						+= "<h3>Proposed Changes</h3>"
						+"<textarea id=\"evo_result_text\" disabled=true>"
						+ JSON.stringify(ev.best_net, null, "\t")
						+ "</textarea>"
						+ "<button onclick='copyResultToInit()'>Accept</button>";
				}
			}
			function start_network_evolve(fast_animate) {
				load_network_def();
				document.getElementById("slow_button").disabled=true;
				document.getElementById("fast_button").disabled=true;
				var cw_current = new canvasWriter(document.getElementById("current_canvas"));
				var cw_best = new canvasWriter(document.getElementById("best_canvas"));
				var ev = new petriEvolve(crit_obj, net_obj);
				ev.freq = document.getElementById("input_freq").value;
				ev.intensity = document.getElementById("input_inten").value;
				cw_current.reset();
				cw_best.reset();
				if (fast_animate){
				fastAsyncLoop(cw_current, cw_best, ev, 0,
						document.getElementById("input_lambda").value,
						document.getElementById("input_gen").value);
				} else {
				slowAsyncLoop(cw_current, cw_best, ev, 0,
						document.getElementById("input_lambda").value,
						document.getElementById("input_gen").value);
				}
			}
		</script>
	</head>
	<body>
		<h1>Petri Calc Sandbox</h1>
		<h2>Net Definition:</h2>
		<div id="main_content_div">
			<span style=" display: flex; ">
			<table>
				<tr>
					<td>Enter network definition:</td>
					<td>
						<textarea id="network_input"> [ ] </textarea>
					</td>
				</tr>
				<tr>
					<td>Enter initial settings:</td>
					<td>
						<textarea id="initial_input"> [ ] </textarea>
					</td>
				</tr>
				<tr>
					<td>Enter colors:</td>
					<td>
						<textarea id="colors_input"> {} </textarea>
					</td>
				</tr>
			</table>
			<h3>Load Examples</h3>
			<ul class="clicky_menu_list">
				<li onclick="loadExample(0)">Example 1(Heat)</li>
				<li onclick="loadExample(1)">Example 2(Yeast)</li>
				<li onclick="loadExample(2)">Example 3(Grass)</li>
				<li onclick="loadExample(3)">Example 4(blank)</li>
			</ul>
			</span>
			<button onclick="load_network_def();">Load</button>

		</div>
		<h2>Preview:</h2>
		<div id="canvas_div"><canvas id="chart_canvas"></canvas></div>
		<h2>Optimization Options:</h2>
		<div id="">
			<table>
				<tr>
					<th>Generations</th>
					<th>Lambda</th>
					<th>Frequency</th>
					<th>Intensity</th>
				</tr>
				<tr>
					<td><input id="input_gen" value="10" /></td>
					<td><input id="input_lambda" value="5" /></td>
					<td><input id="input_freq" value="0.9" /></td>
					<td><input id="input_inten" value="0.9" /></td>
				</tr>
			</table>
			<button id="slow_button" onclick="start_network_evolve(false);">Slow</button>
			<button id="fast_button" onclick="start_network_evolve(true);">Fast</button>
		</div>
		<h2>Progress:</h2>
		<div id="evolve_div">
			<table>
				<tr><th>current</th><th>best</th></tr>
				<tr>
					<td><canvas width=400 height=300 id="current_canvas"></canvas></td>
					<td><canvas width=400 height=300 id="best_canvas"></canvas></td>
				</tr>
			</table>
		</div>
		<h2>Output:</h2>
		<div id="output_div"></div>
	</body>

</html>
